<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>おしゃべりノート</title>
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1/themes/prism-tomorrow.min.css" rel="stylesheet"/>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1/prism.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1/components/prism-javascript.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.js"></script>
    <style>
        :root {
            --accent-color: #00A2E8; /* アクセントカラー */
        }
        html {
            font-size: 16px;
        }
        body {
            max-width: 800px;
            margin: 0 auto;
            padding: 3rem; /* より大胆な余白 */
            font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "Hiragino Kaku Gothic ProN", sans-serif;
            font-size: 1rem;
            font-weight: 300; /* Apple風の細いフォント */
            line-height: 1.8; /* ゆったりとした行間 */
            color: #333;
            background-color: #f9f9f9;
        }
        section {
            margin-bottom: 8rem;
            padding: 3rem;
            background: white;
            border-radius: 1rem;
            box-shadow: 0 0.25rem 1rem rgba(0,0,0,0.08);
        }
        .h2 {
            margin-bottom: 10rem;
        }
        .h3 {
            margin-bottom: 6rem;
        }
        .h4 {
            margin-bottom: 5rem;
        }
        section .h2:last-child {
            margin-bottom: 0;
        }
        h1 {
            font-size: 1.8rem;
            font-weight: 600;
            border-left: 0.375rem solid var(--accent-color);
            padding-left: 1rem;
            margin-bottom: 1.5rem;
            color: #333;
        }
        h2 {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--accent-color);
            margin-top: 0;
            margin-bottom: 1.2rem;
        }
        h3 {
            font-size: 1.2rem;
            font-weight: 600;
            margin-top: 0;
            margin-bottom: 1rem;
        }
        h4 {
            font-size: 1.125rem;
            font-weight: 600;
            margin-top: 1.5rem;
            margin-bottom: 0.75rem;
        }
        p {
            margin-bottom: 1.5rem; /* より大胆な余白 */
        }
        code {
            background: #f1f3f4;
            padding: 0.125rem 0.25rem;
            border-radius: 0.25rem;
            font-family: 'SF Mono', Menlo, Monaco, Consolas, monospace;
            font-size: 0.875em;
            color: #d63384;
        }
        pre {
            margin-top: 1.5rem;
            margin-bottom: 2rem;
        }
        .result {
            background: linear-gradient(135deg, #fafcff 0%, #f0f7ff 100%); /* より薄いグラデーション背景 */
            padding: 2rem;
            border: 1px solid rgba(0, 162, 232, 0.1); /* より薄いボーダー */
            border-radius: 0.75rem;
            margin-top: 1rem;
            box-shadow: 0 0.125rem 0.75rem rgba(0, 162, 232, 0.05); /* より薄い影 */
            font-family: 'SF Mono', Menlo, Monaco, Consolas, monospace; /* モノスペースフォント */
            font-size: 1.1rem;/* 少し大きめ */
            font-weight: 400;
            white-space: pre-wrap;
            position: relative;
            transition: all 0.2s ease; /* ホバー効果用 */
        }
        .result:hover {
            transform: translateY(-1px); /* 軽いホバー効果 */
            box-shadow: 0 0.25rem 1rem rgba(0, 162, 232, 0.1);
        }
        .result::before {
            content: "result";
            display: block;
            font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "Hiragino Kaku Gothic ProN", sans-serif;
            font-size: 0.75rem;
            font-weight: 600;
            color: var(--accent-color);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 1rem; /* より大胆な余白 */
            padding-bottom: 0.75rem; /* より大胆な余白 */
            border-bottom: 1px solid rgba(0, 162, 232, 0.15); /* より薄いボーダー */
        }

        /* スマホ向け (〜37.5rem = 600px) */
        @media screen and (max-width: 37.5rem) {
            body { padding: 1rem; font-size: 0.875rem; } /* 14px相当 */
            section { padding: 1.5rem; margin-bottom: 3rem; }
            h1 { font-size: 1.5rem; }
            h2 { font-size: 1.25rem; }
            h3 { font-size: 1.125rem; }
            h4 { font-size: 1rem; }
        }

        /* タブレット向け (37.5625rem〜64rem = 601px〜1024px) */
        @media screen and (min-width: 37.5625rem) and (max-width: 64rem) {
            body { padding: 2rem; font-size: 0.9375rem; } /* 15px相当 */
            section { padding: 2rem; margin-bottom: 4rem; }
            h1 { font-size: 1.75rem; }
            h2 { font-size: 1.5rem; }
            h3 { font-size: 1.25rem; }
            h4 { font-size: 1.125rem; }
        }
    </style>
</head>
<body>
<section>
    <h1>身の回りのものをオブジェクトとして認識してみる</h1>
    
    <div class="h2">
        <h2>(1)人間をオブジェクトとして、プロパティとメソッドをつけてみる</h2>
        <p>プロパティ<code>name</code>に『りんちゃん』という値を入れ、<br>りんちゃんの行動メソッド（関数）を定義してみる</p>
        <p>オブジェクト：<code>person</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            プロパティ：<code>name</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            メソッド：<code>walk</code>, <code>speak</code>, <code>cooking</code></p>
        
        <pre><code class="language-javascript">
const person1 = {
    name: 'りんちゃん',//nameという名のプロパティにりんちゃんという値を入れる
    walk: function(step){//walkという名のメソッドを定義。引数にstepを取る
        console.log(person1.name + 'は'+ step + '歩歩けます');
        document.write(person1.name + 'は'+ step + '歩歩けます');
    },
    speak:function(who){//speakと いう名のメソッドを定義。引数にwhoを取る
         console.log(person1.name + 'は'+ who + 'とおしゃべりします。');
         document.write(person1.name + 'は'+ who + 'とおしゃべりします。');
    },
    cooking:function(food){//cookingという名のメソッドを定義。引数にfoodを取る
        console.log('今日の'+ person1.name + 'は'+ food + 'を作りました。');
        document.write('今日の'+ person1.name + 'は'+ food + 'を作りました。');
        return food;//foodの値を次にも使えるようにする
    }
};
// オブジェクト定義が終わったあとに呼び出す！メソッドを呼び出し()内の引数を渡す
person1.walk(10)
person1.speak('うーろんくん')
person1.cooking('チキン南蛮')
        </code></pre>
        
        <div class="result" id="result1">
実行結果がここに表示されます
        </div>
    </div>

    <div class="h2">
        <h2>(2)メソッドで区切って複雑な処理もオブジェクトで表す/オブジェクトの中にオブジェクト</h2>
        <p>朝の準備オブジェクトの中に、複数のオブジェクトを作る
        <br>キー名: { ... } として中にまた {} でオブジェクトを作る</p>
        <p>論理値を用いて定義し、if文で朝の行動を表す</p>
        <pre><code class="language-javascript">
const morningrutine = {  // ← モーニングルーティーンオブジェクトを内包
    wakeup: {
        time: '7:00',//7時に起きる
        boilwater: true,//お湯を沸かす
        washface: true,//顔を洗う
        drinkwater: true,//水を飲む
        doskincare: true,//スキンケアをする
    },
    
    breakfast: {
        drinkhotwater: true,//お湯を飲む
        eat: true,//食べる
        eatfruit: true,//果物を食べる
        takesupplements: true//サプリを飲む
    },
    ready: {
        changeclothes: true,//服を着る
        combhair: true,//髪の毛をとかす
        makeup: true,//メイクをする
        grabbag: true,//鞄を持つ
    },
    freetime: {
        study: true,//勉強をする
        readbooks: true,//本を読む
    }
}

//朝の準備が全てできたか
if(morningrutine.wakeup.time && morningrutine.wakeup.boilwater && morningrutine.wakeup.washface 
&& morningrutine.wakeup.drinkwater && morningrutine.wakeup.doskincare && morningrutine.breakfast.drinkhotwater 
&& morningrutine.breakfast.eat && morningrutine.breakfast.eatfruit && morningrutine.breakfast.takesupplements 
&& morningrutine.ready.changeclothes && morningrutine.ready.combhair && morningrutine.ready.makeup && morningrutine.ready.grabbag 
&& morningrutine.freetime.study && morningrutine.freetime.readbooks){
    console.log('朝の準備は完璧！');
}else{
    console.log();
};

//髪の毛とメイク
if(morningrutine.ready.makeup && morningrutine.ready.combhair){
    console.log('髪の毛サラサラにしてお化粧もしたよ〜');
};

//朝食
if(morningrutine.wakeup.doskincare &&  morningrutine.breakfast.eatfruit && morningrutine.breakfast.takesupplements){
    console.log(' 朝からビタミンCでお肌もピカピカ！');
};

//早起きできたか
if(morningrutine.wakeup.time && morningrutine.freetime.study ){
    console.log('早起きして勉強もした！');
}else if(morningrutine.wakeup.time && morningrutine.freetime.readbooks ){
    console.log('早起きして本も読んだ！');
}else if(morningrutine.wakeup.time ){
    console.log('今日は早起きした！');
}else{
    console.log('今日は寝坊しちゃった。。。');
};

//出勤日か否か
if(morningrutine.ready.changeclothes && morningrutine.ready.grabbag){
    console.log('じゃ、お仕事行ってくるね〜');
}else{
    console.log('でも今日はお仕事お休みなんだ〜');
};
        </code></pre>
        <div class="result" id="result2_morning">
実行結果がここに表示されます
        </div>
    </div>

    <div class="h2">
        <h2>(3)細かい動作を表す</h2>
        
        <div class="h3">
            <h3>複数引数を使う</h3>
            <p>引数を複数つけると、より複雑な動作を表せる。<br>marginやpadding設定と同じイメージ。</p>
            <pre><code class="language-javascript">
const person2 = {
    name: "りんちゃん",
    
    walk: function(forward, sideways) {
        console.log(`${this.name}は前に${forward}歩、横に${sideways}歩進んだよ！`);
        return forward + sideways;  // 合計歩数を返す
    }
};
// 呼び出し例
let totalSteps = person2.walk(10, 5);  // → りんちゃんは前に10歩、横に5歩進んだよ！
console.log(`合計${totalSteps}歩歩いたね！`);  // → 合計15歩歩いたね！
            </code></pre>
            
            <div class="result" id="result2">
実行結果がここに表示されます
            </div>
        </div>

        <div class="h3">
            <h3>戻り値returnを使う</h3>
            <p><code>return</code>を使うと、次の処理でもその値を使えるようになる</p>
            
            <pre><code class="language-javascript">
function eat(food) {
    console.log(`食べ物「${food}」を食べました。`);
    return "💩";  // 食べた結果
}

let result1 = eat("トマト");
console.log(`出てきたもの：${result1}`); // → 出てきたもの：💩


function selfControl() {
    console.log("オナニーしました。");
    return "🤍";  // 処理の結果として戻り値を返す
}

let result2 = selfControl();
console.log(`出てきたもの：${result2}`);  // → 出てきたもの：🤍
            </code></pre>
            
            <div class="result" id="result3">
実行結果がここに表示されます
            </div>
        </div>
    </div>

    <div class="h2">
        <h2>(4)ライブラリを使う</h2>
        <p><strong>ライブラリ</strong>：機能付きオブジェクトの集まり</p>
        <br>「<code>ライブラリ名.機能()</code>」で呼び出せる</p>
        <ul>
            <li>１自作ライブラリ：自分で便利な機能をまとめて作ったオブジェクト。</li>
            <li>１標準ライブラリ：JavaScriptに最初から備わっている便利な機能群。</li>
            <li>外部ライブラリ：他人が作った便利な機能をCDNやnpmで読み込んで使うもの。</li>
        </ul>
        <pre><code class="language-javascript">
            const MyLibrary = {
                greet: function(name) {
                    console.log(`こんにちは、${name}！`);
                },
                add: function(a, b) {
                    return a + b;
                },
                square: function(x) {
                    return x * x;
                }
            };
            
            // 呼び出し例
            MyLibrary.greet("りんちゃん");      // → こんにちは、りんちゃん！
            console.log(MyLibrary.add(2, 3));   // → 5
            console.log(MyLibrary.square(4));   // → 16
            
        </code></pre>
    </div>
</section>

<section>
    <h1>色々な型</h1>
    <p>同じ足し算でも、型によって結果が違う</p>
    <p><strong>string型</strong>：10＋10＝1010 （文字列として認識されるから、数字としては計算されない）
    <br><strong>int型</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;：10＋10＝20
    <br><strong>date型</strong>&nbsp;&nbsp;：2025/7/2＋10＝2035/7/12 （日付け型にすることで、1日足すと翌日に日付になる）</p>

    
    
    <pre><code class="language-javascript">
// string型の例
let str1 = "10";
let str2 = "10";
console.log(`string型：${str1}＋${str2}＝${str1 + str2}`);
// → 文字列連結になるので 1010

// int型の例
let int1 = 10;
let int2 = 10;
console.log(`int型：${int1}＋${int2}＝${int1 + int2}`);
// → 数値の計算になるので 20

// date型の例
let dateObj = new Date("2025/07/02");
dateObj.setDate(dateObj.getDate() + 10);  // 10日後を計算
let y = dateObj.getFullYear();
let m = (dateObj.getMonth() + 1).toString().padStart(2, "0");
let d = dateObj.getDate().toString().padStart(2, "0");
console.log(`date型：2025/7/2＋10日＝${y}/${m}/${d}`);
// → 10日後の日付を表示
    </code></pre>
    
    <div class="result">

    </div>
</section>

<section>
    <h1>for文を使ったループ処理</h1>
    
    <div class="h2">
        <h2>日付表示</h2>
        <p>日付は</p>
        <pre><code class="language-javascript">
//for文の基本構文
for(初期化; 条件; 増減) {
    // 処理
}
        </code></pre>
        
        
        
        <pre><code class="language-javascript">
//年
const year = (yearParam) => {
    for(let i = 2025; i < 2100; i++){
        return yearParam;
    }   
}
console.log(year(2025));

//月
const month = (monthParam) => {
    for(let i = 0; i < 12; i++){    
        return monthParam;
    }
}

//日（構文エラーがあるため、コメントアウト）
/*
const day = (dayParam) => {
    // 正しい構文で書き直す必要があります
    // 月によって日数が違うロジックを実装する予定
}
*/

//年・月・日
const dateFunc = (year, month, day) => {
    return `${year}/${month}/${day}`;
}
console.log(dateFunc(2025, 7, 4));
        </code></pre>
        
        <div class="result" id="result4">
実行結果がここに表示されます
        </div>
    </div>

    <div class="h2">
        <h2>グラフィック表示</h2>
        <p>ループで看板風のグラフィックを作る</p>
        
        <pre><code class="language-javascript">
let text = "HELLO";

for (let y = 0; y < 5; y++) {
    let line = "";
    for (let x = 0; x < 10; x++) {
        if (y === 0 || y === 4) {
            // 一番上か一番下は全部枠
            line += "*";
        } else if (x === 0 || x === 9) {
            // 左右の枠
            line += "*";
        } else if (y === 2 && x >= 2 && x < 2 + text.length) {
            // y=2行目のx=2~6に文字を置く
            line += text[x - 2];
        } else {
            // それ以外は空白
            line += " ";
        }
    }
    console.log(line);
}
        </code></pre>
        
        <div class="result" id="result5">
        </div>
    </div>
</section>

<!-- 実際に実行されるJavaScript -->
<script>
// (1)人間オブジェクトの実行
const person1 = {
    name: 'りんちゃん',
    walk: function(step){
        let output = person1.name + 'は'+ step + '歩歩けます<br>';
        console.log(person1.name + 'は'+ step + '歩歩けます');
        return output;
    },
    speak:function(who){
        let output = person1.name + 'は'+ who + 'とおしゃべりします。<br>';
        console.log(person1.name + 'は'+ who + 'とおしゃべりします。');
        return output;
    },
    cooking:function(food){
        let output = '今日の'+ person1.name + 'は'+ food + 'を作りました。<br>';
        console.log('今日の'+ person1.name + 'は'+ food + 'を作りました。');
        return output;
    }
};

let result1Html = '';
result1Html += person1.walk(10);
result1Html += person1.speak('うーろんくん');
result1Html += person1.cooking('チキン南蛮');
document.getElementById('result1').innerHTML = result1Html;

// (2)モーニングルーティンオブジェクトの実行
const morningrutine = {
    wakeup: {
        time: '7:00',
        boilwater: true,
        washface: true,
        drinkwater: true,
        doskincare: true,
    },
    breakfast: {
        drinkhotwater: true,
        eat: true,
        takesupplements: true
    },
    ready: {
        changeclothes: true,
        combhair: true,
        makeup: true,
        grabbag: true,
    },
    freetime: {
        study: true,
        readbooks: true,
    }
}

let result2MorningHtml = '';

//朝の準備が全てできたか
if(morningrutine.wakeup.time && morningrutine.wakeup.boilwater && morningrutine.wakeup.washface 
&& morningrutine.wakeup.drinkwater && morningrutine.wakeup.doskincare && morningrutine.breakfast.drinkhotwater 
&& morningrutine.breakfast.eat && morningrutine.breakfast.takesupplements && morningrutine.ready.changeclothes 
&& morningrutine.ready.combhair && morningrutine.ready.makeup && morningrutine.ready.grabbag 
&& morningrutine.freetime.study && morningrutine.freetime.readbooks){
    result2MorningHtml += '朝の準備は完璧！<br>';
    console.log('朝の準備は完璧！');
}else{
    console.log();
};

//髪の毛とメイク
if(morningrutine.ready.makeup && morningrutine.ready.combhair){
    result2MorningHtml += '髪の毛サラサラにしてお化粧もしたよ〜<br>';
    console.log('髪の毛サラサラにしてお化粧もしたよ〜');
};

//早起きできたか
if(morningrutine.wakeup.time && morningrutine.freetime.study ){
    result2MorningHtml += '早起きして勉強もした！<br>';
    console.log('早起きして勉強もした！');
}else if(morningrutine.wakeup.time && morningrutine.freetime.readbooks ){
    result2MorningHtml += '早起きして本も読んだ！<br>';
    console.log('早起きして本も読んだ！');
}else if(morningrutine.wakeup.time ){
    result2MorningHtml += '今日は早起きした！<br>';
    console.log('今日は早起きした！');
}else{
    result2MorningHtml += '今日は寝坊しちゃった。。。<br>';
    console.log('今日は寝坊しちゃった。。。');
};

//出勤日か否か
if(morningrutine.ready.changeclothes && morningrutine.ready.grabbag){
    result2MorningHtml += 'じゃ、お仕事行ってくるね〜<br>';
    console.log('じゃ、お仕事行ってくるね〜');
}else{
    result2MorningHtml += 'でも今日はお仕事お休みなんだ〜<br>';
    console.log('でも今日はお仕事お休みなんだ〜');
};

document.getElementById('result2_morning').innerHTML = result2MorningHtml;

// (3)複数引数の実行
const person2 = {
    name: "りんちゃん",
    walk: function(forward, sideways) {
        let output = `${this.name}は前に${forward}歩、横に${sideways}歩進んだよ！<br>`;
        console.log(`${this.name}は前に${forward}歩、横に${sideways}歩進んだよ！`);
        return forward + sideways;
    }
};

let totalSteps = person2.walk(10, 5);
let result2Html = `りんちゃんは前に10歩、横に5歩進んだよ！<br>合計${totalSteps}歩歩いたね！`;
document.getElementById('result2').innerHTML = result2Html;

// 戻り値の実行（更新されたコードに合わせて修正）
function eat(food) {
    console.log(`食べ物「${food}」を食べました。`);
    return "💩";
}

function selfControl() {
    console.log("オナニーしました。");
    return "🤍";
}

let eatResult = eat("トマト");
let selfControlResult = selfControl();
let result3Html = `食べ物「トマト」を食べました。<br>出てきたもの：${eatResult}<br>オナニーしました。<br>出てきたもの：${selfControlResult}`;
document.getElementById('result3').innerHTML = result3Html;

// 型の実行（consoleログに変更）
let str1 = "10";
let str2 = "10";
console.log(`string型：${str1}＋${str2}＝${str1 + str2}`);

let int1 = 10;
let int2 = 10;
console.log(`int型：${int1}＋${int2}＝${int1 + int2}`);

let dateObj = new Date("2025/07/02");
dateObj.setDate(dateObj.getDate() + 10);
let y = dateObj.getFullYear();
let m = (dateObj.getMonth() + 1).toString().padStart(2, "0");
let d = dateObj.getDate().toString().padStart(2, "0");
console.log(`date型：2025/7/2＋10日＝${y}/${m}/${d}`);

// for文の実行
const year = (yearParam) => {
    for(let i = 2025; i < 2100; i++){
        return yearParam;
    }   
}

const dateFunc = (year, month, day) => {
    return `${year}/${month}/${day}`;
}

let result4Html = `年の関数実行結果：${year(2025)}<br>日付関数実行結果：${dateFunc(2025, 7, 4)}`;
document.getElementById('result4').innerHTML = result4Html;

// グラフィック表示の実行（新しいHELLOコードに更新）
let result5Html = '';
let text = "HELLO";

for (let y = 0; y < 5; y++) {
    let line = "";
    for (let x = 0; x < 10; x++) {
        if (y === 0 || y === 4) {
            // 一番上か一番下は全部枠
            line += "*";
        } else if (x === 0 || x === 9) {
            // 左右の枠
            line += "*";
        } else if (y === 2 && x >= 2 && x < 2 + text.length) {
            // y=2行目のx=2~6に文字を置く
            line += text[x - 2];
        } else {
            // それ以外は空白
            line += " ";
        }
    }
    result5Html += line + '<br>';
    console.log(line);
}
document.getElementById('result5').innerHTML = result5Html;
</script>

</body>
</html>